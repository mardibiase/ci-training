#!/usr/bin/env python3

import argparse
import csv
import datetime
import json
import os
import sys
from benchmark import BenchmarkProject, BENCHMARK_PROJECTS
from cvedata import ProjectVulnerabilityDatabase, NVD, VulnerabilityInfo, VulnerabilityPatch
from csvexporter import CSVExporter
from packagerepository import PackageSpec, PackageRepository
from riskprofile import RiskProfile
    
    
def calculateSelfReportedVulnerabilityRiskProfile(project, vulnerabilities, nvd):
    riskProfile = RiskProfile([0, 0, 0])
    for vulnerability in vulnerabilities:
        cvss = vulnerability.cvss
        if cvss != None and cvss > 0.0:
            bin = 3 if cvss >= 9.0 else 2 if cvss >= 7.0 else 1 if cvss >= 4.0 else 0
            riskProfile.addToBin(bin)
    return riskProfile
    
    
def calculateVulnerabilityRiskProfile(project, vulnerabilities, nvd):
    riskProfile = RiskProfile([0, 0, 0])
    for vulnerability in vulnerabilities:
        nvdEntry = nvd.getVulnerabilityInfo(vulnerability.cve)
        if nvdEntry != None and nvdEntry.cvss != None and nvdEntry.cvss > 0.0:
            bin = 3 if nvdEntry.cvss >= 9.0 else 2 if nvdEntry.cvss >= 7.0 else 1 if nvdEntry.cvss >= 4.0 else 0
            riskProfile.addToBin(bin)
    return riskProfile
    
    
def calculateVulnerabilityDiscoverySpeed(project, vulnerabilities, nvd):
    riskProfile = RiskProfile([30, 90, 180])
    for vuln in vulnerabilities:
        nvdEntry = nvd.getVulnerabilityInfo(vuln.cve)
        if nvdEntry == None or nvdEntry.publishDate == None:
            continue
        discoveryDays = (vuln.publishDate - nvdEntry.publishDate).days
        riskProfile.addValue(discoveryDays)
    return riskProfile

    
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--project", type=str, default="*")
    parser.add_argument("--start", type=str, default="2021-12-23")
    parser.add_argument("--end", type=str, default="2022-01-27")
    args = parser.parse_args()
    
    projects = [project for project in BENCHMARK_PROJECTS if args.project in (project.name, "*")]
    nvd = NVD()
    repositories = {project.getDisplayName(): PackageRepository(project) for project in projects}
    vulnerabilityExporter = CSVExporter("Project", "Snapshot date", "CVE", "OwnCVSS", "OfficialCVSS", "OfficialPublishDate")
    patchExporter = CSVExporter("Project", "Package", "Patch date", "CVE", "CVSS", "PatchDays")

    for project in projects:
        repo = repositories[project.getDisplayName()]

        for snapshot in [args.start, args.end]:
            projectVulnerabilityDatabase = ProjectVulnerabilityDatabase(project, snapshot)
            vulnerabilities = projectVulnerabilityDatabase.vulnerabilities

            mergedVulnerabilities = nvd.mergeVulnerabilities(vulnerabilities)

            patchedVulnerabilities = nvd.calculateVulnerabilityPatchDays(repo)
            patchSpeed = [pv.patchDays for pv in patchedVulnerabilities]

            vulnerabilityExporter.mapRows(mergedVulnerabilities, \
                lambda mv: [project.getDisplayName(), snapshot, mv[0].cve, mv[0].cvss, mv[1].cvss, mv[1].publishDate])
            patchExporter.mapRows(patchedVulnerabilities, \
                lambda pv: [project.getDisplayName(), pv.package.name, pv.patch.date, pv.vulnerability.cve, pv.vulnerability.cvss, pv.patchDays])

            print("")
            print(project)
            print(f"    Reported vulnerabilities:                    {len(vulnerabilities)}")
            print(f"    Vulnerability risk profile (self-reported):  {calculateSelfReportedVulnerabilityRiskProfile(project, vulnerabilities, nvd)}")
            print(f"    Vulnerability risk profile (NIST NVD):       {calculateVulnerabilityRiskProfile(project, vulnerabilities, nvd)}")
            print(f"    Vulnerability discovery speed:               {calculateVulnerabilityDiscoverySpeed(project, vulnerabilities, nvd)}")
            print(f"    Vulnerability patch speed:                   {RiskProfile.fromThresholds([30, 90, 180], patchSpeed)}")
            print("")

    if args.project == "*":
        vulnerabilityExporter.saveCSV(f"{sys.path[0]}/../data/benchmark-results/vulnerabilities.csv")
        patchExporter.saveCSV(f"{sys.path[0]}/../data/benchmark-results/vulnerability-patches.csv")
    